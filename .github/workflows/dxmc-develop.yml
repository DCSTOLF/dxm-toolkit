name: dxmc

on:
  push:
    branches: [ develop ]


jobs:
  # centos7:

  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: checkout dxtoolkit code
  #     uses: actions/checkout@master

  #   - name: Set up a Perl container
  #     #uses: pioro/dxtoolkit@develop
  #     uses: docker://pioro/dxpythoncentos7:latest
  #     with:
  #       ENCKEY: ${{ secrets.ENCKEY }}

  #   - name: Get the version
  #     id: get_version
  #     run: |
  #       if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
  #         SOURCE_TAG=${GITHUB_REF#refs/tags/}
  #       elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
  #         SOURCE_TAG=${GITHUB_REF#refs/heads/}
  #       else
  #         exit 1
  #       fi
  #       FILENAME="dxmc-${SOURCE_TAG}-redhat7.gz"
  #       echo "::set-env name=SOURCE_TAG::$SOURCE_TAG"
  #       echo "::set-env name=FILENAME::$FILENAME"


  #   - name: rename toolkit
  #     run: |
  #       ls -l 
  #       pwd
  #       ls -l dist/
  #       cp dist/dxmc.gz ${{ env.FILENAME }}

  #   - name: Upload centos 7
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: cento7build
  #       path: ${{ env.FILENAME }}


  # windows:

  #   runs-on: windows-latest

  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8

  #   - name: Get the version
  #     id: get_version
  #     run: |
  #       if (${env:GITHUB_REF} -match "tags") {
  #         $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/tags\/', ''
  #       } elseif (${env:GITHUB_REF} -match "heads") {
  #         $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/heads\/', ''
  #       } else {
  #         exit 1
  #       }
  #       $FILENAME="dxtoolkit2-" + $SOURCE_TAG + "-win64-installer.zip"
  #       echo "::set-env name=SOURCE_TAG::$SOURCE_TAG"
  #       echo "::set-env name=FILENAME::$FILENAME"
  #     shell: powershell

  #   - name: Fix encryption key
  #     run: |
  #       cd D:\a\dxm-toolkit\dxm-toolkit\dxm\lib\DxEngine
  #       ls -l secret.py
  #       mv secret.py secret.orig.py
  #       $raw = (Get-Content -path .\secret.orig.py -Raw) -replace 'changemechangemechagemechangemec','${{ secrets.ENCKEY_WINDOWS }}'
  #       Set-Content -Path .\secret.py -Value $raw
  #       cd D:\a\dxm-toolkit\dxm-toolkit\
  #     shell: powershell

  #   - name: Install OpenSSL
  #     run: |
  #       choco install openssl --no-progress
  #       echo "::set-env name=INCLUDE::C:\\Program Files\\OpenSSL-Win64\\include;%INCLUDE%"
  #       echo "::set-env name=LIB::C:\\Program Files\\OpenSSL-Win64\\lib;%LIB%"        
        

  #   - name: Install dependencies
  #     run: |
  #       echo %INCLUDE%
  #       python -m pip install --upgrade pip
  #       python -m pip install cryptography
  #       python setup.py install
  #       pip install pyinstaller
  #       pyinstaller --onefile --clean dxmc.py

  #   - name: compress toolkit
  #     run: |
  #       $NAME = "d:\a\dxm-toolkit\dxm-toolkit\${{ env.FILENAME }}"
  #       echo ${NAME}
  #       Compress-Archive -Path d:\a\dxm-toolkit\dxm-toolkit\dist\dxmc -DestinationPath ${NAME}
  #     shell: powershell
  
  #   - name: Upload windows
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: windowsbuild
  #       path: ${{ env.FILENAME }}

  osx:
    runs-on: macos-latest

    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master


    - name: Get the version
      id: get_version
      run: |
        if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
          SOURCE_TAG=${GITHUB_REF#refs/tags/}
        elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
          SOURCE_TAG=${GITHUB_REF#refs/heads/}
        else
          exit 1
        fi
        FILENAME="dxmc-${SOURCE_TAG}-osx.gz"
        echo "::set-env name=SOURCE_TAG::$SOURCE_TAG"
        echo "::set-env name=FILENAME::$FILENAME"

    - name: run python
      run: |
          CELL=`brew --prefix perl`
          OPENLIB=`brew --prefix openssl`
          CDIR=`pwd`
          export PP=${CELL}/bin/pp
          export LIBS="-l ${OPENLIB}/lib/libssl.dylib -l ${OPENLIB}/lib/libcrypto.dylib"
          echo $LIBS
          
          python3 setup.py install
          pip3 install pyinstaller
          pyinstaller --onefile --clean --hidden-import pkg_resources dxmc.py
          cd dist
          gzip dxmc
          cd ${CDIR}
          ls -l ./dist
          cp dist/dxmc.gz ${{ env.FILENAME }} 

    - name: Upload OSX
      uses: actions/upload-artifact@v1
      with:
        name: osxbuild
        path: ${{ env.FILENAME }}
      