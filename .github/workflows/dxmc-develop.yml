name: dxmc

on:
  push:
    branches: [ develop ]


jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Get the version
      id: get_version
      run: |
        if (${env:GITHUB_REF} -match "tags") {
          $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/tags\/', ''
        } elseif (${env:GITHUB_REF} -match "heads") {
          $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/heads\/', ''
        } else {
          exit 1
        }
        $FILENAME="dxtoolkit2-" + $SOURCE_TAG + "-win64-installer.zip"
        echo "::set-env name=SOURCE_TAG::$SOURCE_TAG"
        echo "::set-env name=FILENAME::$FILENAME"
      shell: powershell

    - name: Fix encryption key
      run: |
        cd D:\a\dxm-toolkit\dxm-toolkit\dxm\lib\DxEngine
        ls -l secret.py
        mv secret.py secret.orig.py
        $raw = (Get-Content -path .\dbutils.orig.pm -Raw) -replace '*Thirty-two byte (256 bits) key*','${{ secrets.ENCKEY_WINDOWS }}'
        Set-Content -Path .\secret.py -Value $raw
        cd D:\a\dxm-toolkit\dxm-toolkit\
      shell: powershell

    - name: Install OpenSSL
      run: |
        choco install openssl --no-progress
        echo "::set-env name=INCLUDE::C:\\Program Files\\OpenSSL-Win64\\include;%INCLUDE%"
        echo "::set-env name=LIB::C:\\Program Files\\OpenSSL-Win64\\lib;%LIB%"        
        

    - name: Install dependencies
      run: |
        echo %INCLUDE%
        python -m pip install --upgrade pip
        python -m pip install cryptography
        python setup.py install
        pip install pyinstaller
        pyinstaller --onefile --clean dxmc.py

    - name: compress toolkit
      run: |
        $NAME = "d:\a\dxm-toolkit\dxm-toolkit\${{ env.FILENAME }}"
        echo ${NAME}
        Compress-Archive -Path d:\a\dxm-toolkit\dxm-toolkit\dist\dxmc -DestinationPath ${NAME}
      shell: powershell
  
    - name: Upload windows
      uses: actions/upload-artifact@v1
      with:
        name: windowsbuild
        path: ${{ env.FILENAME }}